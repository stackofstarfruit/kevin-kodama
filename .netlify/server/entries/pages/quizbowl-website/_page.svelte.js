import { c as create_ssr_component, v as validate_component } from "../../../chunks/ssr.js";
const TableOfContents = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mb-4" data-svelte-h="svelte-1j79tbx">Table of Contents</h2> <ol class="list-decimal list-inside text-lg mb-8" data-svelte-h="svelte-16hltm"><li><a href="#site-beginnings" class="text-blue-600 hover:text-blue-700">Site Beginnings (December 2020)</a></li> <li><a href="#landing-page" class="text-blue-600 hover:text-blue-700">Optimizing the Landing Page (January 2021)</a></li> <li><a href="#javascript" class="text-blue-600 hover:text-blue-700">Adventures in JavaScript (January 2022)</a></li> <li><a href="#fleshing-out" class="text-blue-600 hover:text-blue-700">Fleshing Out the Site (August 2022)</a></li> <li><a href="#reactive-css" class="text-blue-600 hover:text-blue-700">Reactive CSS Features (February 2023)</a></li> <li><a href="#conclusion" class="text-blue-600 hover:text-blue-700">Conclusion</a></li></ol>`;
});
const SiteBeginnings = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mt-8 mb-4" id="site-beginnings" data-svelte-h="svelte-tlx3b3">Site Beginnings (December 2020)</h2> <section data-svelte-h="svelte-3ojhc"><p>When I became the webmaster of quizbowl, the club website looked like this:</p> <img alt="Old version of website" class="m-8 mx-auto" id="old-site" width="85%" height="auto" src="../img/old-site.png"> <p class="mb-3">The old website was okay, but it was relatively bare. There was only one page on the site, and it did not contain much information beyond the basics. In addition, most of the material had not been updated in years.</p> <p class="mb-3">First, I thought about what the website was unable to provide. I came up with the following list of what the website needed, in order of priority:</p> <ol class="m-3"><li><strong>Better landing page</strong>: The original website didn&#39;t draw the eye in the way that I wanted it to. My vision was a website that tried to sell you on quizbowl right from the get go. I also thought that more important information should be hitting the user right at load time: for example, I thought it was silly that you learn the names of the officers but not how to contact the club.</li> <li><strong>A more thorough explanation of quizbowl</strong>: The quizbowl explanation on the website was okay, but it only gave the most basic facts about the activity. If you wanted to learn more, there was nowhere to go for that information. Since quizbowl is still a relatively unknown activity, that was a problem.</li> <li><strong>Better club records</strong>: At the bottom of the old site, there was a link to archived tournament results. This archive had not been updated in a long time. As a &quot;stretch goal&quot;, I wanted the site to have a more detailed archive that really gave you a better sense of the club&#39;s past.</li></ol> <p class="mb-3">But before I could do any of that, I had to figure out how to SSH into the student server. The quizbowl website is hosted on vergil, an Apache server for UW students. The old webmaster had long since graduated the university, so I had to figure out most of the hosting logistics myself.</p> <p class="mb-3">After a long saga that involved tracking down long-forgotten credentials and downloading many an SSH app, I was finally able to get access to the backend of the site. The interface was simple, but it was pretty clunky and hard to use. I could see why no one had updated the website in a long time...</p></section>`;
});
const LandingPage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mt-8 mb-4" id="landing-page" data-svelte-h="svelte-wcllum">Optimizing the Landing Page (January 2021)</h2> <section data-svelte-h="svelte-1bhh833"><p class="mb-3">While I had issues with the original website, I initially wanted to keep it as a single-page application. Many websites are far too complicated, and I thought it would be best if I kept it short and sweet. I planned to keep the original section layout of the site the same with only a few changes to the design. You&#39;ll notice that I kept many of the original elements, as well as the color palette of the background; in other words, I wasn&#39;t just rebuilding the site from the ground up!</p> <p class="mb-3">That being said, there were still certainly some changes I wanted to see. I used flexbox to create a banner for the website and to render some YouTube explainer videos that I put on the page. I also added some changes to make sure that the site was compatible with mobile browsing.</p> <p class="mb-3">You can see what is roughly the finished design below:</p> <img alt="Website after initial redesign" class="m-8 mx-auto" id="medium-site" width="85%" height="auto" src="../img/medium-site.png"> <p class="mb-3">The changes weren&#39;t dramatic, but I liked how they came out. The website (and therefore the club) felt more accessible after the redesign. That big old low-res picture was gone, replaced by elements that delivered a much cleaner landing experience. And you could now instantly watch videos explaining what quizbowl when visiting the site, satisfying what I considered to be the primary use case. This was enough to satisfy my needs as president at the time, so I considered the website redesign to be sufficient. The website stayed unchanged in this form for about a year.</p></section>`;
});
const JavaScriptAdventures = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mt-8 mb-4" id="javascript" data-svelte-h="svelte-1gvxe69">Adventures in JavaScript (January 2022)</h2> <section data-svelte-h="svelte-1oyhbye"><p>In 2022, I took a class on fullstack web development. There were many independently-directed personal projects assigned with the class, which inspired me to bring back a project that I started in high school. In high school I was friends with an aspiring web developer, and he asked me if I could help him make a web app called the &quot;Short Generator&quot; that would generate a random short work of literature to read for quizbowl. I assembled a somewhat lengthy CSV file of short literature, complete with quizbowl metrics and links to the works in question. Unfortunately, that app never materialized.</p> <img alt="Short Generator CSV file" class="m-8 mx-auto" id="short-generator" width="85%" height="auto" src="../img/short-generator.png"> <p>Now that I had some JavaScript knowledge under my belt, I figured I could apply my new knowledge about HTML style to the site, and then I could go about implementing my &quot;Short Generator&quot;. My big realization here was that you cannot manipulate a file on the client side through conventional methods. If I wanted my web app to work, I was going to have to set up some external location from where I could retrieve my data.</p> <p class="mb-3">The file seemed too small to warrant a website, so I mounted it on an external website hosted through Netlify. You can download the file <a href="https://quizbowl-short-generator.netlify.app/short_generator_weighted.csv">here</a>. I then used a fetch request to pull down the data from the website. The fetch request was chained into a function that pulls a random entry from the table based on the frequency that the entry occurs in quizbowl.</p> <p class="mb-3">After that, I used some client-side JavaScript to render what I wanted. I pulled down the row of data as an array, and then I used JavaScript to insert them into the HTML (using the old methods, like .getElementById() functions). I also used some CSS to style the page elements on click. This allowed user to get information about the work directly on the page. (You can still try out this feature by selecting &quot;What Should I Read&quot; on the website.)</p> <p class="mb-3">One challenge that I ran into was weird caching of the CSS and JavaScript files on the Apache server. After a site update, the new HTML would render immediately, but the new CSS and JavaScript wouldn&#39;t show up until some sort of refresh occured. To solve this problem, I decided to change the name of the files every time I reuploaded them (v2, v3, etc.): an imperfect solution, but it got the job done!</p></section>`;
});
const FleshingOutSite = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mt-8 mb-4" id="fleshing-out" data-svelte-h="svelte-n8sqgj">Fleshing Out the Site (August 2022)</h2> <section data-svelte-h="svelte-1brxotp"><p class="mb-3">After my brief JavaScript adventure, I became dissatisfied with my explanation of quizbowl. The website referred to external explanations of quizbowl <a href="https://www.youtube.com/watch?v=spCgHocfBi0">here</a> and <a href="https://www.pace-nsc.org/resources/what-is-quizbowl-a-primer-and-faq-for-newcomers/">here</a>. While I thought these explanation were okay, they were still missing a little something. They focused too much on the &quot;what&quot; of quizbowl and not the &quot;why&quot;. I wanted to create my own &quot;What Is Quizbowl?&quot; guide that built things up from first principles: one that spent less time on the granular details of quizbowl and more time on how we got here.</p> <p class="mb-3">After consulting with the <a class="text-blue-600 hover:text-blue-700" href="https://www.pace-nsc.org/about/">Partnership for Academic Competition Excellence</a>, I created a guide that used the now deprecated <b>30-20-10 model</b> from old quizbowl and the <b>pyramidal article model</b> from journalism to illustrate why quizbowl exists in its current form. I supplemented this with a &quot;How to Write Questions&quot; guide later on, which covered similar ground.</p> <p class="mb-3">Since I now had several distinct pages on the website, I decided to refactor the landing page and add a navbar. The Meet the Officers section was moved to its own page, as were Resources and Past Results. Once a topic was moved to its own page, I fleshed it out further to make the site feel more full. The <a class="text-blue-600 hover:text-blue-700" href="https://students.washington.edu/quizbowl/resources.html">Resources</a> page got one of the more dramatic overhauls, expanding from a short bulleted list to a well-organized clickable table of contents. The wide scope of the outbound links made it one of the best &quot;Quick Links&quot; quizbowl pages on the Internet (shown below).</p> <img class="mb-3" src="./img/quizbowl-resources.png" alt="Club Resources page"> <p class="mb-3"><a class="text-blue-600 hover:text-blue-700" href="https://students.washington.edu/quizbowl/past-results.html">Past Results</a> also got a dramatic overhaul, turning into a comprehensive history of the club. There are detailed stats pages for every event that the club has ever attended, as well as a brief overview of every club season. At first, the page just chronicled the events of my tenure, but it now even covers events from the distant past. This culminated in a live interview with a &quot;College Bowl&quot; competitor from the 1960s, which you can find information about on the site.</p></section>`;
});
const ReactiveCSSFeatures = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mt-8 mb-4" id="reactive-css" data-svelte-h="svelte-1pka6gg">Reactive CSS Features (February 2023)</h2> <section data-svelte-h="svelte-1w2p87v"><p class="mb-3">My final fluorish for the website was a rehash of the landing page, which I felt was no longer taking full advantage of what the website had to offer. Most importantly, I felt that the website was overly oriented towards potential new members. It was easy for new people to quickly get the information they wanted, but it was difficult for existing members to see what the site had to offer.</p> <p class="mb-3">To that end, I introduced a brand new Quick Links page. I had just recently been learning about some reactive CSS techniques for my other projects, and I decided that it would be fun to employ some here. I added a function where the buttons fill up with color on hover (you can try this out at <a class="text-blue-600 hover:text-blue-700" href="#quizbowl-header">the top of the page</a>).</p> <p class="mb-3">I also replaced the hardcoded schedule of events with an embedded Google Calendar. This was a long-overdue change, and it was unrealistic for the website to be updated as often as needed, even with a webmaster as active as myself at the helm. I had hoped that this could be synced with Discord Events on our server, but Discord Events was a new feature that had not yet been integrated with Google Calendar. This will be a problem for a future webmaster to solve!</p> <p class="mb-3">Around this time, I was able to hand over control to a new webmaster: a fellow UW student named Anirudh Kumar. It is my hope that this website will continue to be maintained by the community well into the future!</p></section>`;
});
const Conclusion = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h2 class="text-2xl font-bold mt-8 mb-4" id="conclusion" data-svelte-h="svelte-yighsq">Conclusion</h2> <section data-svelte-h="svelte-p3xplk"><p class="mb-3">In the end, I feel glad that I was able to leave the quizbowl website better than how I found it. Web development is so concrete and rewarding, especially in a community context. I am happy that I was able to create something that betters the world in some small way.</p> <p class="mb-3">And I really am grateful towards this site for being a constant source of learning. This has been my pet project ever since I started learning web development in college. Whenever I learned something new, this site was the first place I would try to apply it. I skipped over this earlier, but I even converted the website into a full-fledged React app for a brief time. (This was very difficult and overkill for this particular project, but I learned a lot from it!)</p> <p class="mb-3">Learning how to integrate modern techniques with UW&#39;s ancient web technology helped me put technological advancements into context. It helped me realize that I really do enjoy the more mundane aspects of web development, like naming pages and putting everything together in a readable format. I really put a lot of love into this website, and I hope that it shows!</p> <p class="mb-3">Towards the end of my tenure as webmaster, I managed to find a successor: a fellow UW student named <a class="text-blue-600 hover:text-blue-700" href="https://www.linkedin.com/in/anirudh-t-kumar/">Anirudh Kumar</a>. It is my hope that this website will continue to be passed down for years to come!</p> <p>—K, August 2023</p></section>`;
});
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${$$result.head += `<!-- HEAD_svelte-s78fb5_START -->${$$result.title = `<title>Quizbowl Website</title>`, ""}<!-- HEAD_svelte-s78fb5_END -->`, ""} <body class="bg-blue-50 text-blue-900 p-6"><h1 class="text-4xl px-4 mt-10 mb-10" id="quizbowl-header" data-svelte-h="svelte-cfr27c">Quizbowl Website (Winter 2020 - Spring 2023)</h1> ${`<div id="new-site-loading" class="border-solid border-black border-2 w-5/6 h-96 my-8 mx-auto flex items-center justify-center" data-svelte-h="svelte-cinckv"><p class="text-3xl text-center">LOADING PROJECT...</p></div>`} <article class="text-lg font-medium text-gray-700"><p class="mb-6" data-svelte-h="svelte-u9o9sk">From 2020 to 2023, I was the webmaster and sometimes-president of quizbowl at the University of Washington. Quizbowl is a fast-paced academic competition centered around the quick recall of facts. However, the supply of centralized quizbowl resources is limited. I hoped to address this by creating a club website that collected not just club-specific resources, but also resources applicable to all of quizbowl. Below is a timeline of how the website came to be. While not all of this information is technical, I hope it will shed some light on my development process.</p> ${validate_component(TableOfContents, "TableOfContents").$$render($$result, {}, {}, {})} ${validate_component(SiteBeginnings, "SiteBeginnings").$$render($$result, {}, {}, {})} ${validate_component(LandingPage, "LandingPage").$$render($$result, {}, {}, {})} ${validate_component(JavaScriptAdventures, "JavaScriptAdventures").$$render($$result, {}, {}, {})} ${validate_component(FleshingOutSite, "FleshingOutSite").$$render($$result, {}, {}, {})} ${validate_component(ReactiveCSSFeatures, "ReactiveCSSFeatures").$$render($$result, {}, {}, {})} ${validate_component(Conclusion, "Conclusion").$$render($$result, {}, {}, {})}</article></body>`;
});
export {
  Page as default
};
